// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Metadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Metadata entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Metadata entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Metadata", id.toString(), this);
  }

  static load(id: string): Metadata | null {
    return store.get("Metadata", id) as Metadata | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dataToken(): Bytes | null {
    let value = this.get("dataToken");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set dataToken(value: Bytes | null) {
    if (value === null) {
      this.unset("dataToken");
    } else {
      this.set("dataToken", Value.fromBytes(value as Bytes));
    }
  }

  get createdBy(): Bytes | null {
    let value = this.get("createdBy");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set createdBy(value: Bytes | null) {
    if (value === null) {
      this.unset("createdBy");
    } else {
      this.set("createdBy", Value.fromBytes(value as Bytes));
    }
  }

  get updatedBy(): Bytes | null {
    let value = this.get("updatedBy");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set updatedBy(value: Bytes | null) {
    if (value === null) {
      this.unset("updatedBy");
    } else {
      this.set("updatedBy", Value.fromBytes(value as Bytes));
    }
  }

  get flags(): Bytes | null {
    let value = this.get("flags");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set flags(value: Bytes | null) {
    if (value === null) {
      this.unset("flags");
    } else {
      this.set("flags", Value.fromBytes(value as Bytes));
    }
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (value === null) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(value as Bytes));
    }
  }
}
